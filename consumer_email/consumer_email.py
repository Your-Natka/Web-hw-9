# pylint: disable=no-member

import pika
import json
import time
import traceback
from mongoengine import connect
from db.models import Contact
from bson import ObjectId
import os

connect(db="contacts_db", host=f"mongodb://{os.getenv('MONGODB_HOST')}:27017", alias="default")

def send_sms_stub(contact: Contact):
    print(f"üì≤ –ù–∞–¥—Å–∏–ª–∞—î–º–æ SMS –¥–æ {contact.phone} ({contact.fullname})...")
    contact.is_sent = True
    contact.save()

def callback(ch, method, _, body):
    try:
        print("üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ sms_queue")
        data = json.loads(body)
        print(f"üì¶ –î–∞–Ω—ñ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data}")

        contact = Contact.objects(id=ObjectId(data["id"])).first()

        if contact:
            print(f"üë§ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç: {contact.fullname}, –º–µ—Ç–æ–¥: {contact.send_method}, is_sent: {contact.is_sent}")
            if contact.send_method == "sms" and not contact.is_sent:
                send_sms_stub(contact)
            else:
                print("‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –∞–±–æ –º–µ—Ç–æ–¥ –Ω–µ 'sms'")
        else:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ")

        ch.basic_ack(delivery_tag=method.delivery_tag)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        traceback.print_exc()
        ch.basic_nack(delivery_tag=method.delivery_tag)

# –û—á—ñ–∫—É—î–º–æ RabbitMQ
for _ in range(10):
    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(host="rabbitmq"))
        break
    except pika.exceptions.AMQPConnectionError:
        print("‚è≥ –û—á—ñ–∫—É—î–º–æ RabbitMQ...")
        time.sleep(5)
else:
    print("‚ùå RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
    exit(1)

channel = connection.channel()
channel.queue_declare(queue="sms_queue")
channel.basic_consume(queue="sms_queue", on_message_callback=callback)

print("üì• –û—á—ñ–∫—É—î–º–æ SMS-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
channel.start_consuming()
